import React, { useState, useEffect } from 'react';

// Supabase configuration - REPLACE WITH YOUR ACTUAL SUPABASE DETAILS
// You can find these in your Supabase project settings under API.
// For security, in a production environment, you would typically use environment variables
// and a serverless function to proxy requests to Supabase to hide your `anon` key.
// For this internal tool, direct client-side access is acceptable if you understand the risk.
const SUPABASE_URL = 'https://lojafhskcvmugyxwebeb.supabase.co'; // Replace with your Supabase URL
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxvamFmaHNrY3ZtdWd5eHd5YmViIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIxNjE1MzIsImV4cCI6MjA2NzczNzUzMn0.2qKuM-WvKZcEgjJqLGvMyjBw0dpp1o0ELCkEuDKRUpw'; // Replace with your Supabase anon key (public key)

// Questions designed to extract Francesca's deep philosophy
const questions = [
  {
    id: 1,
    theme: "Philosophy",
    text: "What does 'emotional literacy' *look like* in a 3-year-old? Give me an example.",
    microPrompt: "Think about the tiny humans and their big feelings!"
  },
  {
    id: 2,
    theme: "Philosophy",
    text: "What should a preschooler *never* be punished for?",
    microPrompt: "What's off-limits for consequences?"
  },
  {
    id: 3,
    theme: "Philosophy",
    text: "Whatâ€™s something you *refuse* to do in your classroom, even if every other teacher does it?",
    microPrompt: "Your secret rebellion!"
  },
  {
    id: 4,
    theme: "Philosophy",
    text: "You can only teach one thing all year. What is it?",
    microPrompt: "The ultimate lesson."
  },
  {
    id: 5,
    theme: "Ritual & Rhythm",
    text: "Describe the first 10 minutes after drop-off. Donâ€™t hold back.",
    microPrompt: "The sacred opening act."
  },
  {
    id: 6,
    theme: "Ritual & Rhythm",
    text: "Whatâ€™s the weekly ritual the kids look forward to most?",
    microPrompt: "The highlight of their week!"
  },
  {
    id: 7,
    theme: "Ritual & Rhythm",
    text: "Whatâ€™s one daily sensory experience you would build the whole day around?",
    microPrompt: "Engage all the senses!"
  },
  {
    id: 8,
    theme: "Relational Structure",
    text: "How do you want parents to *feel* when they leave their kid with you?",
    microPrompt: "The parent vibe check."
  },
  {
    id: 9,
    theme: "Relational Structure",
    text: "When a child is melting down, what do you do? What do you *not* do?",
    microPrompt: "The meltdown masterpiece."
  },
  {
    id: 10,
    theme: "Relational Structure",
    text: "If a parent disagrees with your method, how do you respond?",
    microPrompt: "Navigating the parent-teacher dance."
  },
  {
    id: 11,
    theme: "Environment Design",
    text: "What does a 'sacred' learning space smell like? Sound like?",
    microPrompt: "Paint a picture with your senses."
  },
  {
    id: 12,
    theme: "Environment Design",
    text: "Whatâ€™s the most important object in the roomâ€”and why?",
    microPrompt: "The unsung hero of the classroom."
  },
  {
    id: 13,
    theme: "Environment Design",
    text: "If you had to eliminate all furniture but one piece, what stays?",
    microPrompt: "Survival of the essential!"
  },
  {
    id: 14,
    theme: "Staffing + Culture",
    text: "What would disqualify someone from ever working here, no matter their credentials?",
    microPrompt: "The absolute no-go."
  },
  {
    id: 15,
    theme: "Staffing + Culture",
    text: "Whatâ€™s the initiation ritual every new staff member must go through?",
    microPrompt: "Welcome to the family!"
  },
  {
    id: 16,
    theme: "Staffing + Culture",
    text: "Whatâ€™s more important: warmth or structure? Why?",
    microPrompt: "The great debate!"
  }
];

function App() {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answer, setAnswer] = useState('');
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [respondentName, setRespondentName] = useState('Francesca'); // Default respondent

  // Function to submit answer to Supabase
  const submitAnswer = async (questionText, answerText, respondent) => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(`${SUPABASE_URL}/rest/v1/sacred_quiz_responses`, {
        method: 'POST',
        headers: {
          'apikey': SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`, // Using anon key for client-side insert
          'Content-Type': 'application/json',
          'Prefer': 'return=representation' // Ensures the created record is returned
        },
        body: JSON.stringify({
          question: questionText,
          answer: answerText,
          respondent: respondent,
          // created_at will be defaulted by Supabase
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Supabase error: ${response.status} - ${errorData.message || 'Unknown error'}`);
      }

      console.log('Answer submitted successfully:', await response.json());
    } catch (err) {
      console.error('Error submitting answer:', err);
      setError('Failed to submit answer. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Handle moving to the next question
  const handleNextQuestion = async () => {
    if (!answer.trim()) {
      setError("Please provide an answer before moving on.");
      return;
    }

    await submitAnswer(questions[currentQuestionIndex].text, answer, respondentName);

    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(prevIndex => prevIndex + 1);
      setAnswer(''); // Clear answer for next question
      setError(null); // Clear any previous errors
    } else {
      setQuizCompleted(true);
    }
  };

  // Handle Enter key press
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !loading) {
      handleNextQuestion();
    }
  };

  // Focus on the textarea when question changes
  useEffect(() => {
    const textarea = document.getElementById('answer-input');
    if (textarea) {
      textarea.focus();
    }
  }, [currentQuestionIndex]);

  // Tailwind CSS classes for consistent styling
  const containerClasses = "min-h-screen bg-gradient-to-br from-purple-100 to-indigo-200 flex items-center justify-center p-4 font-inter";
  const cardClasses = "bg-white rounded-xl shadow-2xl p-8 md:p-12 w-full max-w-2xl transform transition-all duration-500 ease-in-out scale-100 opacity-100";
  const headerClasses = "text-center text-4xl font-extrabold text-purple-800 mb-6";
  const questionTextClasses = "text-2xl font-semibold text-gray-800 mb-4 leading-relaxed";
  const microPromptClasses = "text-lg text-purple-600 font-medium italic mb-6";
  const textareaClasses = "w-full p-4 border-2 border-purple-300 rounded-lg focus:outline-none focus:ring-4 focus:ring-purple-400 focus:border-transparent transition-all duration-300 text-gray-700 resize-y min-h-[120px]";
  const buttonClasses = "mt-6 w-full py-3 px-6 bg-purple-700 text-white font-bold text-lg rounded-lg shadow-md hover:bg-purple-800 focus:outline-none focus:ring-4 focus:ring-purple-500 focus:ring-opacity-75 transition-all duration-300 transform hover:scale-105";
  const progressClasses = "text-center text-purple-500 text-sm mt-4 font-medium";
  const errorClasses = "text-red-600 text-center mt-4 font-semibold";
  const completedMessageClasses = "text-center text-3xl font-bold text-green-700 mt-8";

  return (
    <div className={containerClasses}>
      <div className={cardClasses}>
        <h1 className={headerClasses}>Educator Vision Capture</h1>

        {!quizCompleted ? (
          <>
            <div className="mb-6">
              <label htmlFor="respondentName" className="block text-gray-700 text-sm font-bold mb-2">
                Who's answering? (e.g., Francesca)
              </label>
              <input
                type="text"
                id="respondentName"
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                value={respondentName}
                onChange={(e) => setRespondentName(e.target.value)}
                placeholder="Enter name"
              />
            </div>

            <p className={questionTextClasses}>
              {questions[currentQuestionIndex].text}
            </p>
            {questions[currentQuestionIndex].microPrompt && (
              <p className={microPromptClasses}>
                {questions[currentQuestionIndex].microPrompt}
              </p>
            )}
            <textarea
              id="answer-input"
              className={textareaClasses}
              value={answer}
              onChange={(e) => setAnswer(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Type your profound answer here..."
              rows="5"
            ></textarea>
            {error && <p className={errorClasses}>{error}</p>}
            <button
              onClick={handleNextQuestion}
              className={buttonClasses}
              disabled={loading}
            >
              {loading ? 'Submitting...' : (currentQuestionIndex === questions.length - 1 ? 'Finish Quiz' : 'Next Question')}
            </button>
            <p className={progressClasses}>
              Question {currentQuestionIndex + 1} of {questions.length}
            </p>
          </>
        ) : (
          <div className={completedMessageClasses}>
            <p>ðŸŽ‰ Quiz Completed! ðŸŽ‰</p>
            <p className="text-xl text-gray-700 mt-4">
              Thank you for sharing your incredible vision, {respondentName}!
            </p>
            <p className="text-lg text-gray-600 mt-2">
              Your insights are now captured and ready to build something truly special.
            </p>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;
